# Задача "За честь и отвагу!":
# Создайте класс Knight, наследованный от Thread, объекты которого будут обладать следующими свойствами:
# 1.Атрибут name - имя рыцаря. (str)
# 2.Атрибут power - сила рыцаря. (int)
# А также метод run, в котором рыцарь будет сражаться с врагами:
# 1.При запуске потока должна выводится надпись "<Имя рыцаря>, на нас напали!".
# 2.Рыцарь сражается до тех пор, пока не повергнет всех врагов (у всех потоков их 100).
# 3.В процессе сражения количество врагов уменьшается на power текущего рыцаря.
# 4.По прошествию 1 дня сражения (1 секунды) выводится строка
# "<Имя рыцаря> сражается <кол-во дней>..., осталось <кол-во воинов> воинов."
# 5.После победы над всеми врагами выводится надпись "<Имя рыцаря> одержал победу спустя <кол-во дней> дней(дня)!"
# Как можно заметить нужно сделать задержку в 1 секунду, инструменты для задержки выберите сами.
# Пункты задачи:
# 1.Создайте класс Knight с соответствующими описанию свойствами.
# 2.Создайте и запустите 2 потока на основе класса Knight.
# 3.Выведите на экран строку об окончании битв.

# Пример результата выполнения программы:

# Алгоритм выполнения кода:

# # Создание класса
# first_knight = Knight('Sir Lancelot', 10)
# second_knight = Knight("Sir Galahad", 20)
# # Запуск потоков и остановка текущего
# # Вывод строки об окончании сражения

from threading import Thread
from time import sleep


class Knight(Thread):
    def __init__(self, name, power):
        super().__init__()
        self.name = name
        self.power = power
        self.enemies = 100
        self.days = 0

    def run(self):
        print(f'{self.name}, на нас напали!')
        while self.enemies > 0:
            sleep(1)
            self.enemies -= self.power
            self.days += 1
            print(f'{self.name} сражается {self.days}..., осталось {self.enemies} воинов.')
        print(f'{self.name} одержал победу спустя {self.days} дней(дня)!')


first_knight = Knight('Sir Lancelot', 10)
second_knight = Knight("Sir Galahad", 20)

first_knight.start()
second_knight.start()

first_knight.join()
second_knight.join()

print('Все сражения закончились')
